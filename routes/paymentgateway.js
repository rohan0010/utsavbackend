'use strict';

///Routing for payment transaction requests

const express = require('express');
const router = express.Router();

const dbOperations = require("../config/crudoperations/orders");
const validate = require("../config/validate");
const logger = require("../config/logger");
const request2 = require('request');
const crypto = require('crypto');

const utils = require('../config/utils');
const secrets = require('../config/config');


var key = secrets.PAYU_KEY,
	txnid = utils.randomStringGenerate(32),
	testEnv = true;

/*
 * Creates a hash out of the data.
 *
 * @param key {String} Merchant key.
 * @param txnid {String} Random Txn id generated by us.
 * @param amount {String} Amount to bill.
 * @param fname {Sring} Firstname of the customer.
 * @param email {String} Email Address of the customer.
 * @param phone {String} Phone.
 * @returns {Promise} Internal promise.
 */
var createHash = (function (key, txnid, amount, fname, email, phone, productinfo) {
	var hash = crypto.createHash("sha512");
	var promise = new Promise(function (resolve, reject) {
		hash.on("readable", function () {
			var createdHash = hash.read();
			if (createdHash !== "") resolve({
				key: key,
				hash: createdHash.toString("hex").toLowerCase(),
				txnid: txnid,
				amount: amount,
				firstname: fname,
				email: email,
				phone: phone,
				productinfo: productinfo
			});
		});

		hash.write(key + "|" + txnid + "|" + amount + "|" + productinfo + "|" + fname + "|" + email + "|||||||||||" + secrets.PAYU_SALT);
		hash.end();
	});
	return promise;
})


var createResponseHash = function (txnObj) {

	var hash = crypto.createHash("sha512");
	var promise = new Promise(function (resolve, reject) {
		hash.on("readable", function () {
			var createdHash = hash.read();
			if (createdHash !== "") resolve({
				key: txnObj.key,
				hash: createdHash.toString("hex").toLowerCase(),
				txnid: txnObj.txnid,
				amount: txnObj.amount,
				firstname: txnObj.firstname,
				email: txnObj.email,
				phone: txnObj.phone
			});
		});

		hash.write(secrets.PAYU_SALT + "|" + txnObj.status + '|||||||||||' + txnObj.email + "|" + txnObj.firstname + "|" + txnObj.productinfo + "|" + txnObj.amount + "|" + txnObj.txnid + "|" + txnObj.key);
		hash.end();
	});
	return promise;
};







    var initialise = function(request,response,order,userData){
	txnid = utils.randomStringGenerate(32);
	var that = this;
    var fname = "";
    var phone = "";
        if (userData.userInfo && userData.userInfo.fullname) {
				 fname = userData.userInfo.fullname;
			} else {  fname = ""; }
			if (userData.mobile === undefined) {
				phone = "";
			} else { phone = userData.mobile; }

		
		var email = userData.userEmail;
		var amount = order.total;
		var orderString = JSON.stringify(order);
		var productinfo = orderString;
		// Pass hash a, fname, email, phone to create hash.
		// createHash.bind(null, key, newtxnid);
		createHash.call(null, key, txnid, amount, fname, email, phone, productinfo).then(function (obj) {
			// Add to object.
			// console.log(obj);
			// obj.productinfo = obj.productinfo;
			obj.service_provider = "payu_paisa";
			obj.surl = secrets.reqUrl + "/paymentgateway/vTransaction";
			obj.furl = secrets.reqUrl + "/paymentgateway/vTransaction";
			
			// Post to payment site.
			request2.post({ url: (testEnv ? secrets.PAYU_TEST_URL : secrets.PAYU_LIVE_URL), form: obj }, function (error, httpRes, body) {
				if (error) response.send(error);
				if (httpRes && httpRes.statusCode == 200) {
					response.send(body);
				}
				else if (httpRes && httpRes.statusCode >= 300 && httpRes.statusCode <= 400) {
					response.redirect(httpRes.headers.location.toString());
				}
				else {
				}
			});

		});
};

router.post('/vTransaction', function (request, response) {
	var txnObj = request.body;
	if (txnObj.status === 'success') {
		createResponseHash(txnObj).then(function (obj) {
			if (obj.hash === txnObj.hash) {
				console.log(txnObj);
				txnObj.productinfo.transaction = JSON.stringify(txnObject);
                dbOperations.createOrder(txnObj.productinfo , (error2,result2)=>{
					if(error2){
						logger.error(error2);
						response.render("paymentFail", { txnId: txnObj.txnid, message: "Error occurred! Contact customer care for a refund." });
					}
					else{
						const productcrud = require("../config/crudoperations/productcrud");
						const profileOps = require('../config/crudoperations/profile');

						for(var i=0; i<result2.products.length; i++){
							var Query = {
								"variants.$.stock" : -result2.products[i].quantity
							}
							productcrud.increementProperty2(result2.products[i].productId, result2.products[i].variantId, Query, (error3,result3)=>{
								if(error3){
									logger.error(error3);
								}
							})
						}
						var userId="";
						if(request.session && request.session.user && request.session.user.userId){
							userId = request.session.user.userId;
						}
						else{
							userId = txnObj.email;
						}
						// const creditOps = require("../config/crudoperations/credits");
						// creditOps.transferCredits(userId, result2.orderId, result2.total, result2.creditsUsed ,()=>{});

						profileOps.emptyCart(userId, () => { });
						

						response.render("paymentSuccess", { txnId: result2.orderId, message: "Order Successfull!" });
					}
				});
			}
			else {
				response.render("paymentFail", { txnId: txnObj.txnid, message: "Transaction failed" });
			}
		});
	}
	else {
		response.render("paymentFail", { txnId: txnObj.txnid, message: "Transaction failed" });
	}
});




//test card details
// Card No - 5123456789012346
// Expiry - 05/2020
// CVV - 123
// Name - Test.


module.exports = {router:router,call:initialise};